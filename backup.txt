const getUsers1 = async (user_status) => {
  const status = user_status ? { user_status } : {};
  return await User.find(status);
};

const signUpUserOld = async (userData,res) => {
//   const existingUser = await User.findOne({
//     mobile_number: userData.mobile_number,
//   });

//   if (existingUser) {
//     throw new Error("User already exists");
//   }

//   return await User.create(userData);

let user = await User.findOne({ mobile_number:userData.mobile_number });
console.log(":",user)
if (user) {
    if (user.user_status === "deleted") {
      throw new Error("This user is deleted. Please contact support.");
    }
    if (!user.verified) {
      user.user_name = userData.user_name;
      await user.save();
    } else {
      throw new Error("User is already registered and verified, please login");
    }
  } else {
    user = await User.create({
      user_name:userData.user_name,
      mobile_number:userData.mobile_number,
      verified: false,
    });
  }

  if (userData.mobile_number === "+919999999999") {
    return res.status(200).json({
        status: true,
        message: "User registered successfully. Use OTP 123456 to verify.",
    });
}

   if (lastOtpRequest[user._id] && Date.now() - lastOtpRequest[user._id] < 2 * 60 * 1000) {
    return res.status(400).json({
        status: false,
        message: "Please wait at least 2 minutes before requesting another OTP.",
    });
}

lastOtpRequest[user._id] = Date.now();

const otp = Math.floor(100000 + Math.random() * 900000);
const expiration = new Date(Date.now() + 2 * 60 * 1000); 

const countryCode = userData.mobile_number.slice(0, 3);
const phoneNumber = userData.mobile_number.slice(3);

await axios.post(interaktUrl, {
    countryCode: countryCode,
    phoneNumber: phoneNumber,
    callbackData: "OTP",
    type: "Template",
    template: {
        name: "doshion_app",
        languageCode: "en",
        bodyValues: [otp.toString()],
        buttonValues: {
            "0": [otp.toString()]
        }
    }
}, {
    headers: {
        Authorization: `Basic ${interaktApiKey}`,
        "Content-Type": "application/json"
    }
});

        // Save the OTP in the Otp collection
        const otpRecord = await Otp.create({
            userId: user._id,
            otp: otp.toString(),
            expiration: expiration,
        });

        setTimeout(async () => {
            await Otp.deleteOne({ _id: otpRecord._id });
            console.log("OTP expired and removed from database");
        }, 2 * 60 * 1000);
};

const signUpUserOld = async (userData,res) => {
//   const existingUser = await User.findOne({
//     mobile_number: userData.mobile_number,
//   });

//   if (existingUser) {
//     throw new Error("User already exists");
//   }

//   return await User.create(userData);

let user = await User.findOne({ mobile_number:userData.mobile_number });
console.log(":",user)
if (user) {
    if (user.user_status === "deleted") {
      throw new Error("This user is deleted. Please contact support.");
    }
    if (!user.verified) {
      user.user_name = userData.user_name;
      await user.save();
    } else {
      throw new Error("User is already registered and verified, please login");
    }
  } else {
    user = await User.create({
      user_name:userData.user_name,
      mobile_number:userData.mobile_number,
      verified: false,
    });
  }

  if (userData.mobile_number === "+919999999999") {
    return res.status(200).json({
        status: true,
        message: "User registered successfully. Use OTP 123456 to verify.",
    });
}

   if (lastOtpRequest[user._id] && Date.now() - lastOtpRequest[user._id] < 2 * 60 * 1000) {
    return res.status(400).json({
        status: false,
        message: "Please wait at least 2 minutes before requesting another OTP.",
    });
}

lastOtpRequest[user._id] = Date.now();

const otp = Math.floor(100000 + Math.random() * 900000);
const expiration = new Date(Date.now() + 2 * 60 * 1000); 

const countryCode = userData.mobile_number.slice(0, 3);
const phoneNumber = userData.mobile_number.slice(3);

await axios.post(interaktUrl, {
    countryCode: countryCode,
    phoneNumber: phoneNumber,
    callbackData: "OTP",
    type: "Template",
    template: {
        name: "doshion_app",
        languageCode: "en",
        bodyValues: [otp.toString()],
        buttonValues: {
            "0": [otp.toString()]
        }
    }
}, {
    headers: {
        Authorization: `Basic ${interaktApiKey}`,
        "Content-Type": "application/json"
    }
});

        // Save the OTP in the Otp collection
        const otpRecord = await Otp.create({
            userId: user._id,
            otp: otp.toString(),
            expiration: expiration,
        });

        setTimeout(async () => {
            await Otp.deleteOne({ _id: otpRecord._id });
            console.log("OTP expired and removed from database");
        }, 2 * 60 * 1000);
};

const signInUserold = async (mobile_number,res) => {
//   const user = await User.findOne({ mobile_number });
//   if (!user) {
//     throw new Error("User not found");
//   }
//   return user;

let user = await User.findOne({ mobile_number });

if (!user) {
    return res.status(404).json({
      status: false,
      message: "User not found",
    });
  }

  if (user.user_status === "deleted") {
    return res.status(400).json({
        status: false,
        message: "This user is deleted. Please contact support.",
    });
}

if (user.user_status !== "approve") {
    return res.status(400).json({
      status: false,
      message: "Your account has not been approved yet.",
    });
  }

  if (mobile_number === "+919999999999") {
    return res.status(200).json({
      status: true,
      message: "OTP sent to your mobile number. Use OTP 123456 to login.",
    });
  }

  if (
    lastOtpRequest[user._id] &&
    Date.now() - lastOtpRequest[user._id] < 2 * 60 * 1000
  ) {
    return res.status(400).json({
      status: false,
      message:
        "Please wait at least 2 minutes before requesting another OTP.",
    });
  }

  lastOtpRequest[user._id] = Date.now();

  // Generate a 6-digit OTP
  const otp = Math.floor(100000 + Math.random() * 900000);
  const expiration = new Date(Date.now() + 2 * 60 * 1000); // OTP expires in 2 minutes

  const countryCode = mobile_number.slice(0, 3);
  const phoneNumber = mobile_number.slice(3);

  await axios.post(
    interaktUrl,
    {
      countryCode: countryCode,
      phoneNumber: phoneNumber,
      callbackData: "OTP",
      type: "Template",
      template: {
        name: "doshion_app",
        languageCode: "en",
        bodyValues: [otp.toString()],
        buttonValues: {
          0: [otp.toString()],
        },
      },
    },
    {
      headers: {
        Authorization: `Basic ${interaktApiKey}`,
        "Content-Type": "application/json",
      },
    }
  );

  const otpRecord = await Otp.create({
    userId: user._id,
    otp: otp.toString(),
    expiration: expiration,
  });

  // Set a timeout to delete the OTP after 2 minutes
  setTimeout(async () => {
    await Otp.deleteOne({ _id: otpRecord._id });
    console.log("OTP expired and removed from database");
  }, 2 * 60 * 1000);
  
};

// await axios.post(
  //   interaktUrl,
  //   {
  //     countryCode: country_code,
  //     phoneNumber: mobile_number,
  //     callbackData: "OTP",
  //     type: "Template",
  //     template: { name: "doshion_app", languageCode: "en", bodyValues: [otp.toString()], buttonValues: { 0: [otp.toString()] } },
  //   },
  //   { headers: { Authorization: `Basic ${interaktApiKey}`, "Content-Type": "application/json" } }
  // );

  //old pattern
      .pattern(/^\d+\.\d+\.\d+\.[A-Za-z]{1,4}$/)

      const scanMultipleProductsOLd = async (Product_Codes,wareHouse_code) => {
    let messages = [];
    let success = false;
    const warehouse = await getwareHousesByCode(wareHouse_code);

    if(!warehouse)
    {
        return { success: false, message: `No WareHouse found for given code: ${wareHouse_code}`};
        // messages.push(`No WareHouse found for given code: ${wareHouse_code}`);
    }
    
    const Products = await ProductService.getMultipleProductByCode(Product_Codes);

    const foundProductCodes = Products.map((p) => p.productCode);

    const missingProductCodes = Product_Codes.filter(code => !foundProductCodes.includes(code));

    if (missingProductCodes.length > 0) {
        // return { success: false, message: `No products found for given code ${missingProductCodes.join(", ")}` };
        messages.push(`No products found for given codes : ${missingProductCodes.join(", ")}`);
    }

    //extract products
    const exhaustedProducts = Products.filter((p) => p.productStatus === ProductEnum.EXHAUSTED && p.isActive);
    console.log("ex:",exhaustedProducts);

    const newProducts = Products.filter((p) => p.productStatus === ProductEnum.NEW && p.isActive);
    console.log("N:",newProducts);

    const inUseProducts = Products.filter((p) => p.productStatus === ProductEnum.IN_USE && p.isActive);
    console.log("in:",inUseProducts);

    const deletedProducts = Products.filter((p) => !p.isActive);
    console.log("del:",deletedProducts);

    //extract productcodes
    const exhaustedCodes = exhaustedProducts.map((ep) => ep.productCode).join(", ");
    const newCodes = newProducts.map((np) => np.productCode).join(", ");
    const inUseCodes = inUseProducts.map((ip) => ip.productCode).join(", ");
    const deletedCode = deletedProducts.map((dp) => dp.productCode).join(", ");

    

    if(newProducts.length > 0)
    {
        messages.push(`Product status already NEW for: ${newCodes}`);
    }

    if(deletedProducts.length > 0)
    {
        messages.push(`Product Is Not Active for: ${deletedCode}`);
    }    

    if(inUseProducts.length > 0)
    {
        messages.push(`Product status InUse for: ${inUseCodes}`);
    }   

    if (exhaustedProducts.length > 0 && missingProductCodes.length === 0 && newCodes.length === 0 && inUseCodes.length === 0 && deletedCode.length === 0)
    {
        const exhaustedProductIds = exhaustedProducts.map((product) => product._id);

        await Product.updateMany(
            {_id: {$in:exhaustedProductIds} },
            {$set:{productStatus:ProductEnum.NEW,isActive:true}}
        )

        messages.push(`Product status updated to NEW for: ${exhaustedCodes}`);
        success=true;
    }

    return {
        success,
        message:messages,
        ProductCodes: {
            notFound: missingProductCodes,
            alreadyNew: newCodes, 
            inUse:inUseCodes,
            deleted: deletedCode, 
        },
        data: exhaustedProducts, 
    };
};

const mongoose = require("mongoose");
const { ProductEnum } = require('../config/global.js');

const ProductSchema = new mongoose.Schema(
  {
    // productName: { type: String, required: true },
    productCode: {
      type: String,
      required: true,
      unique: true,
      // validate: {
      //   validator: function (value) {
      //     // return /^[A-Za-z]{4}\d{4}$/.test(value); 
      //     return /^\d{3,4}\.\d{1,2}\.\d{2}\.[A-Za-z]{1,4}$/.test(value);
      //   },
      //   // message: "Product code must have 4 letters followed by 4 digits (e.g., ABCD1234)",
      //   message:"Product code must follow the format: 0000.00.00.ABCD Upto"
      // },
    },
    // productDesc: String,
    // connectorType :String,
    distributorType :String,
    // size:String,
    isActive: { type: Boolean, default: true },
    createdAt: { type: Date, default: Date.now },
    resinType:{type: String},
    vesselSize:{type: String},
    adapterSize:{type:String},
    productStatus: { type: String, enum: [ProductEnum.NEW, ProductEnum.EXHAUSTED, ProductEnum.IN_USE], required: true, default: ProductEnum.NEW},
  },
  { timestamps: true }
);

module.exports = mongoose.model("Product", ProductSchema);
